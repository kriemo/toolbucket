import argparse
from cyvcf2 import VCF, Writer


def build_header(fai_fn):
  """
  Use fai index to build a simple header for vcf file
  return header as string
  """

  new_header = []
  new_header.append("##fileformat=VCFv4.1")
  tid_pre = "##contig=<ID="
  with open(fai_fn, 'r') as f:
      for line in f:
          fields = line.split("\t")
          ctig = fields[0]
          ctig_len = fields[1]
          hdr_str = tid_pre + ctig + ",length=" + ctig_len + ">"
          new_header.append(hdr_str)
  
  cols = ["#CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT\n"]
  new_header.append("\t".join(cols))
  hdr = "\n".join(new_header)
  return hdr

def bed_to_vcf(bed_fn, vcf_fo):
  """
  requires bed file with 5 columns
  chrom,start,end,ref,alt
  """
  with open(bed_fn) as f:
      for line in f:
          chrom, start, end, ref, alt = line.strip().split("\t")
          v_str = [chrom, end, ".", ref, alt, "1", "PASS",".", "."]
          v = vcf_fo.variant_from_string("\t".join(v_str))
          vcf_fo.write_record(v)


def main():

  parser = argparse.ArgumentParser(description = """
    Utility to convert bed-like file with alleles to a simple VCF
    """)

  parser.add_argument('-b',
                      '--bed',
                      help = """
                      bed file to convert to vcf
                      must have chrom, start, end, ref, and alt columns
                      """,
                      required = True)
  parser.add_argument('-f',
                      '--fai',
                      help = """
                      fasta index file generated by samtools faidx
                      """,
                      required = True)
  parser.add_argument('-o',
                      '--output',
                      help = """,
                      output file name, 
                      prints to standard out if not supplied
                      """)

  args = parser.parse_args()
  
  # - is accepted as standard out for cyvcf2
  if args.output is None:
      output = "-" 
  else:
      output = args.output
  
  hdr = build_header(args.fai)

  w = Writer.from_string(output, hdr)

  bed_to_vcf(args.bed, w)
  w.close()
   


if __name__ == '__main__':
    main()
